@page "/"
@using DAL.Entities
@using BLL.Interfaces
@inject IJSRuntime JS
@inject ITextService TextService

<PageTitle>Text Editor</PageTitle>

<h3>Write your novel here</h3>
<div contenteditable="true" id="editor" style="border: 1px solid #ccc; padding: 10px; min-height: 200px;"></div>


<div class="col-auto mt-3">
  <button id="saveButton" type="button" class="btn btn-primary mb-3">Save</button>
</div>
@if (DialogIsOpen)
{
  <ModalWindow OnClose="@((args) => OnDialogClose(args.Item1, args.Item2, args.Item3))" Name=@CharacterName></ModalWindow>
}

@code {
  #region Delegates

  private static Func<string, Task> OpenModalWindowAction;
  private static Func<string, Task> SaveUserTextAction;

  #endregion
  #region ModalWindow

  private bool DialogIsOpen = false;
  private string CharacterName = "";

  #endregion
  #region Properties

  private string InitialUserTextContent = "";

  #endregion
  #region JsInvokable

  [JSInvokable]
  public static async Task OpenModalWindow(string character)
  {
    await OpenModalWindowAction(character);
  }
  [JSInvokable]
  public static async Task SaveUserText(string userTextContent)
  {
    await SaveUserTextAction(userTextContent);
  }

  #endregion
  #region Overridden

  protected override void OnInitialized()
  {
    base.OnInitialized();
    OpenModalWindowAction = OpenModalWindowAsync;
    SaveUserTextAction = SaveUserTextAsync;
  }
  protected override async Task OnInitializedAsync()
  {
    InitialUserTextContent = (await TextService.GetLatestText()).Text;
    await base.OnInitializedAsync();
  }
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
      await JS.InvokeVoidAsync("InitializeEditor", InitialUserTextContent);

    await base.OnAfterRenderAsync(firstRender);
  }

  #endregion
  #region JsToBlazorViaDelegates

  private async Task OpenModalWindowAsync(string character)
  {
    Console.WriteLine("Modal window: " + character);
    DialogIsOpen = true;
    CharacterName = character;
    StateHasChanged();
  }
  private async Task SaveUserTextAsync(string userTextContent)
  {
    await TextService.SaveUserText(new UserText()
    {
      Text = userTextContent
    });
  }

  #endregion
  private async Task OnDialogClose(string oldNames, string newName, bool isSaved)
  {
    if (isSaved)
    {
      await JS.InvokeVoidAsync("ReplaceOldNameWithNewOne", oldNames, newName);
    }
    DialogIsOpen = false;
  }
}