@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace TestTaskRedRift.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <base href="~/"/>
  <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css"/>
  <link href="css/site.css" rel="stylesheet"/>
  <link href="TestTaskRedRift.styles.css" rel="stylesheet"/>
  <link rel="icon" type="image/png" href="favicon.png"/>
  <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered"/>
</head>
<body>
<component type="typeof(App)" render-mode="ServerPrerendered"/>

<div id="blazor-error-ui">
  <environment include="Staging,Production">
    An error has occurred. This application may no longer respond until reloaded.
  </environment>
  <environment include="Development">
    An unhandled exception has occurred. See browser dev tools for details.
  </environment>
  <a href="" class="reload">Reload</a>
  <a class="dismiss">🗙</a>
</div>

<script src="_framework/blazor.server.js"></script>
<script>
function openModalWindow() {
    DotNet.invokeMethodAsync('TestTaskRedRift', 'OpenModalWindow');
}
  window.myComponent = {
        configureQuillJs: () => {
            var link = Quill.import("formats/link");

            link.sanitize = url => {
                let newUrl = window.decodeURIComponent(url);
                newUrl = newUrl.trim().replace(/\s/g, "");

                if (/^(:\/\/)/.test(newUrl)) {
                    return `http${newUrl}`;
                }

                if (!/^(f|ht)tps?:\/\//i.test(newUrl)) {
                    return `http://${newUrl}`;
                }

                return newUrl;
            }
        }
    }
</script>
</body>
</html>